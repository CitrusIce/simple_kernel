;
; boot.s -- Kernel start location. Also defines multiboot header.
; Based on Bran's kernel development tutorial file start.asm
;

MBOOT_PAGE_ALIGN    equ 1<<0    ; Load kernel and modules on a page boundary
MBOOT_MEM_INFO      equ 1<<1    ; Provide your kernel with memory info
MBOOT_HEADER_MAGIC  equ 0x1BADB002 ; Multiboot Magic value
; NOTE: We do not use MBOOT_AOUT_KLUDGE. It means that GRUB does not
; pass us a symbol table.
MBOOT_HEADER_FLAGS  equ MBOOT_PAGE_ALIGN | MBOOT_MEM_INFO
MBOOT_CHECKSUM      equ -(MBOOT_HEADER_MAGIC + MBOOT_HEADER_FLAGS)


[BITS 32]                       ; All instructions should be 32-bit.

section .init.text
; [GLOBAL mboot]                  ; Make 'mboot' accessible from C.
[GLOBAL mboot_ptr_tmp]                  ; Make 'mboot' accessible from C.
[EXTERN code]                   ; Start of the '.text' section.
; [EXTERN bss]                    ; Start of the .bss section.
; [EXTERN end]                    ; End of the last loadable section.

; mboot:
; glb_mboot_ptr:
  dd  MBOOT_HEADER_MAGIC        ; GRUB will search for this value on each
                                ; 4-byte boundary in your kernel file
  dd  MBOOT_HEADER_FLAGS        ; How GRUB should load your file / settings
  dd  MBOOT_CHECKSUM            ; To ensure that the above values are correct
   
  ; dd  glb_mboot_ptr                     ; Location of this descriptor
  ; dd  code                      ; Start of kernel '.text' (code) section.
  ; dd  bss                       ; End of kernel '.data' section.
  ; dd  end                       ; End of kernel.
  ; dd  start                     ; Kernel entry point (initial EIP).

[GLOBAL start]                  ; Kernel entry point.
[EXTERN kernel_entry]                   ; This is the entry point of our C code
[EXTERN main]                   ; This is the entry point of our C code

start:
  cli                         ; Disable interrupts.
  ; push    ebx                   ; Load multiboot header location
  mov [mboot_ptr_tmp],ebx

  mov esp,STACK_TOP
  and esp,0FFFFFF0H
  mov ebp,0
  jmp $                       ; Enter an infinite loop, to stop the processor

  ; Execute the kernel:
  call main                   ; call our main() function.
	
  jmp $                       ; Enter an infinite loop, to stop the processor
                              ; executing whatever rubbish is in the memory
                              ; after our kernel!

section .init.data 
stack: times 1024 db 0
STACK_TOP equ $-stack-1

mboot_ptr_tmp:dd 0
